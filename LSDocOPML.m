//
//  LSDocOPML.m
//  Linkstr
//
//  Created by Joe Hildebrand on 1/2/08.
//  Copyright 2007-2008 Cursive Systems. All rights reserved.
//

#import "LSDocOPML.h"
#import "PendingLink.h"
#import "Linkstr_AppDelegate.h"
#import "LSXMLAdditions.h"
#import "LSDefaults.h"

@implementation LSDocOPML

- (id)initWithSelection:(NSArray*)items;
{
    if (![self init])
        return nil;
    
    m_items = [items mutableCopy];
    return self;
}

- (BOOL)readFromOutline:(NSXMLElement*)o intoDict:(NSMutableDictionary*)urls;
{
    NSString *typ = [o valueOfAttributeNamed:@"type"];
    NSString *txt = [o valueOfAttributeNamed:@"text"];
    
    if ([typ isEqualToString:@"rss"])
    {
        NSString *htmlUrl = [o valueOfAttributeNamed:@"xmlUrl"]; 
        if (htmlUrl)
        {
            [urls setObject:txt forKey:htmlUrl];
        }
        else
        {
            NSString *xmlUrl = [o valueOfAttributeNamed:@"xmlUrl"];
            if (xmlUrl)
                [urls setObject:txt forKey:xmlUrl];
        }
    }
    else if ([typ isEqualToString:@"link"])
    {
        NSString *url = [o valueOfAttributeNamed:@"url"]; 
        if (url)
            [urls setObject:txt forKey:url];        
    }
    // TODO: type='include' by pulling down URL.  ew.
    
    for (NSXMLElement *child in [o elementsForName:@"outline"])
    {
        if (![self readFromOutline:child intoDict:urls])
            return NO;
    }
    
    return YES;
}

- (BOOL)readFromData:(NSData *)data ofType:(NSString *)typeName error:(NSError **)outError;
{
    NSLog(@"Reading type: %@", typeName);
    NSXMLDocument *doc = [[NSXMLDocument alloc] initWithData:data options:0 error:outError];
    if (!doc)
    {
        NSLog(@"Invalid XML: %@", outError);
        return NO;
    }
    
    NSXMLElement *body = [[doc rootElement] firstElementNamed:@"body"];
    if (!body)
        return NO;
    
    NSMutableDictionary *urls = [[NSMutableDictionary alloc] init];
    for (NSXMLElement *o in [body elementsForName:@"outline"])
    {
        if (![self readFromOutline:o intoDict:urls])
            return NO;
    }
    
    Linkstr_AppDelegate *l = (Linkstr_AppDelegate*)[[NSApplication sharedApplication] delegate];
    int changes = [l createLinksFromDictionary:urls onDates:nil fromSource:nil];
    [GrowlApplicationBridge notifyWithTitle:@"Import Links" 
                                description:[NSString stringWithFormat:@"%d OPML Links Added", changes] 
                           notificationName:LINKS_IMPORT
                                   iconData:nil
                                   priority:0
                                   isSticky:NO
                               clickContext:@""];
    
    return YES;
}

- (NSData *)dataOfType:(NSString *)typeName error:(NSError **)outError;
{
    NSXMLDocument *doc = [NSXMLNode document];
    [doc setCharacterEncoding:@"UTF-8"];
    [doc addChild:[NSXMLNode commentWithStringValue:@"OPML generated by Linkstr"]];
    NSXMLElement *opml = [NSXMLElement elementWithName:@"opml"];
    [doc setRootElement:opml];
    [opml addAttribute:[NSXMLNode attributeWithName:@"version" stringValue:@"1.1"]];
    NSXMLElement *head = [NSXMLNode elementWithName:@"head"];
    [opml addChild:head];
    [head addChild:[NSXMLNode elementWithName:@"title" stringValue:@"Linkstr Links"]];
    NSCalendarDate *now = [NSCalendarDate calendarDate];
    [head addChild:[NSXMLNode elementWithName:@"dateCreated" 
                                  stringValue:[now descriptionWithCalendarFormat:@"%d %b %Y %H:%M:%S Z"]]];
    NSXMLElement *body = [NSXMLNode elementWithName:@"body"];
    [opml addChild:body];
    
    for (PendingLink *p in m_items)
    {        
        [body addChild:[p asOPML]];
    }
    
    return [doc XMLDataWithOptions:
            NSXMLDocumentIncludeContentTypeDeclaration |
            NSXMLNodePrettyPrint | 
            NSXMLNodeUseSingleQuotes];    
}

@end
